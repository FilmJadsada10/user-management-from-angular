import { Component, EventEmitter, Output } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { UserService } from '../../services/user.service';
import { CreateUserRequestDto } from '../../models/create-user-request.model';
import { RoleDto } from '../../models/role.model';
import { PermissionReturnDto } from '../../models/permission-return.model';
import { PermissionDto } from '../../models/permission.model';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-add-user',
  standalone: true,
  imports: [FormsModule, CommonModule],
  templateUrl: './add-user.html',
  styleUrl: './add-user.css',
})
export class AddUser {
  @Output() close = new EventEmitter<void>();

  // ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö ngModel
  user: CreateUserRequestDto = {
    userId: '',
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    roleId: '',
    username: '',
    password: '',
    permissions: []
  };

  confirmPassword: string = '';

  // ‡πÄ‡∏Å‡πá‡∏ö role / permission ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å backend
  roles: RoleDto[] = [];
  permissions: PermissionReturnDto[] = [];

  // ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ checkbox ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ permission
  permissionStates: { [permissionId: string]: PermissionDto } = {};

  constructor(private userService: UserService) {
    this.loadRoles();
    this.loadPermissions();
  }

  // üîπ ‡∏õ‡∏¥‡∏î modal
  onClose() {
    this.close.emit();
  }

  // üîπ ‡πÇ‡∏´‡∏•‡∏î roles ‡∏à‡∏≤‡∏Å backend
  loadRoles() {
    this.userService.getRoles().subscribe({
      next: res => this.roles = res,
      error: err => console.error('‡πÇ‡∏´‡∏•‡∏î roles ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', err)
    });
  }

  // üîπ ‡πÇ‡∏´‡∏•‡∏î permissions ‡∏à‡∏≤‡∏Å backend
  loadPermissions() {
    this.userService.getPermissions().subscribe({
      next: res => this.permissions = res,
      error: err => console.error('‡πÇ‡∏´‡∏•‡∏î permissions ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', err)
    });
  }

  // üîπ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Add User
  onAddUser() {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ password ‡∏Å‡∏±‡∏ö confirmPassword ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
  if (this.user.password !== this.confirmPassword) {
    alert('‚ùå Password ‡πÅ‡∏•‡∏∞ Confirm password ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô');
    return;
  }

  // ‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° permission ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏¥‡πä‡∏Å‡πÑ‡∏ß‡πâ
  this.user.permissions = Object.values(this.permissionStates);

  //  ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  this.userService.createUser(this.user).subscribe({
    next: res => {
      console.log('‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', res);
      alert('‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ popup ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      this.onClose(); // ‚úÖ ‡∏õ‡∏¥‡∏î modal
    },
    error: err => {
      console.error('‚ùå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err);
      alert('‚ùå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ error
    }
  });
}


  togglePermission(permission: PermissionReturnDto, type: 'read' | 'write' | 'delete', event: Event) {
  const target = event.target as HTMLInputElement;
  const checked = target.checked;
  const id = permission.permissionId;

    if (!this.permissionStates[id]) {
      this.permissionStates[id] = {
        permissionId: id,
        isReadable: false,
        isWritable: false,
        isDeletable: false
      };
    }

    if (type === 'read') this.permissionStates[id].isReadable = checked;
    if (type === 'write') this.permissionStates[id].isWritable = checked;
    if (type === 'delete') this.permissionStates[id].isDeletable = checked;
  }

}
